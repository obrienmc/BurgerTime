/**
 * 
 */
package burgertime;
import java.awt.geom.Rectangle2D;
import java.awt.geom.Rectangle2D.Double;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;

/**
 * 
 */

/**
 * TODO Put here a description of what this class does.
 *
 * @author trowbrct.
 *         Created Feb 2, 2014.
 */
public class Level {
	private int currentLevel;
	private File inputFile;
	private int lineNumber;
	private Scanner in;
	private ArrayList<Rectangle2D> pathList;
	private ArrayList<Rectangle2D> plateList;
	private ArrayList<Rectangle2D> burgerList;
	private Rectangle2D[] guards;
	private Rectangle2D hero;
	
	public Level() {
		this.currentLevel = 1;
		this.hero = new Rectangle2D.Double();
		this.pathList = new ArrayList<Rectangle2D>();
		this.burgerList = new ArrayList<Rectangle2D>();
		this.guards = new Rectangle2D[4];
		this.lineNumber = 0;
	}
	
	public void loadLevel() {
		// re-initialize variables ??
		this.lineNumber = 0;
//		this.hero = new Rectangle2D.Double();
		this.pathList = new ArrayList<Rectangle2D>();
		this.plateList = new ArrayList<Rectangle2D>();
		this.burgerList = new ArrayList<Rectangle2D>();
//		this.guards = new Rectangle2D[4];
		
		this.inputFile = new File("level" + this.currentLevel + ".txt");

		try {
			this.in = new Scanner(this.inputFile);
		} catch (FileNotFoundException e) {
			new RuntimeException("You suck");
		}
		
		while (this.in.hasNextLine()) {
			
			if (this.lineNumber < 16) {//this will be 16!
				this.burgerList.add(extractRectangle());
				
			} else if (this.lineNumber == 16){// will be 16!
				this.hero = extractRectangle();
				
			} else if (this.lineNumber > 16 && this.lineNumber <= 20){// will be 16 and 20
				this.guards[this.lineNumber - 17] = extractRectangle();
			}
			if (this.lineNumber > 20 && this.lineNumber <= 24){
				this.plateList.add(extractRectangle());
			}
			if (this.lineNumber > 24 && this.lineNumber <= 42){
				this.pathList.add(extractRectangle());
			}
			if (this.lineNumber > 42){
				break;
			}
			this.lineNumber++;
		}
			this.in.close();
	}
	
	private Rectangle2D.Double extractRectangle(){
		int i = 0;
		int j = 0;
		int k = 0;
		int l = 0;
		int x = 0;
		int y = 0;
		int width = 0;
		int height = 0;
		String line = this.in.nextLine();
		while (Character.isDigit(line.charAt(i))) {
			i++;
		}
		x = Integer.parseInt(line.substring(0, i));

		j = i + 1;
		while (Character.isDigit(line.charAt(j))) {
			j++;
		}
		y = Integer.parseInt(line.substring(i + 1, j));
		
		k = j + 1;
		while (Character.isDigit(line.charAt(k))){
			k++;
		}
		width = Integer.parseInt(line.substring(j + 1, k));
		
		l = k + 1;
		while (Character.isDigit(line.charAt(l))){
			l++;
		}
		height = Integer.parseInt(line.substring(k + 1, l));
		return new Rectangle2D.Double(x, y, width, height);
	}
	
	public void upLevel(){
		this.currentLevel++;
		this.loadLevel();
	}
	
	public void downLevel(){
		this.currentLevel--;
		this.loadLevel();
	}
	
	public ArrayList<Rectangle2D> getPath(){
		return this.pathList;
	}
	
	public ArrayList<Rectangle2D> getPlates(){
		return this.plateList;
	}
	
	public Burger getBurger(int index){
		ArrayList<Rectangle2D> burgerPosition = new ArrayList<Rectangle2D>();
		ArrayList<Rectangle2D> barPosition = new ArrayList<Rectangle2D>();
		for (int i = 1 + (4 * index); i <= (index + 1) * 4; i++){
			burgerPosition.add(this.burgerList.get(i - 1));
			barPosition.add(this.pathList.get(i - 1));
		}
		burgerPosition.add(this.plateList.get(index));
		return new Burger(burgerPosition, barPosition);
	}
}
