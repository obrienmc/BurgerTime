/**
 * 
 */
package burgertime;

import java.awt.Color;
import java.awt.geom.Rectangle2D;
import java.util.ArrayList;



/**
 * TODO Put here a description of what this class does.
 *
 * @author xiaox.
 *         Created Feb 4, 2014.
 */
public class Burger implements Temporal{

	private Rectangle2D[][] burger=new Rectangle2D[4][5];
	private int[][] burgerStatus=new int[4][5];
	private Color[] colorList={Color.ORANGE,Color.GREEN,Color.RED,Color.ORANGE};
	private ArrayList<Rectangle2D> position;
	private ArrayList<Rectangle2D> bars;
	//private int numberDepressed;
	//private boolean isDepressed;
	//private boolean isMoving;
	private int itemsPlated;
	private boolean isPaused;
	
	/**
	 * TODO Put here a description of what this constructor does.
	 * @param burger 
	 * @param bars 
	 *
	 */
	public Burger(ArrayList<Rectangle2D> burger, ArrayList<Rectangle2D> bars){
		this.bars=bars;
		this.position=burger; //record the burger's current position 
		this.isPaused=false;
		for (int i=0;i<this.burger.length;i++){
			//get the Rectangle's left-corner point;
			double x=this.position.get(i).getX();
			double y=this.position.get(i).getY();
			//get the Rectangle's width and height and divide their width into 5 pieces
			double width=(this.position.get(i).getHeight())/5;
			double height=this.position.get(i).getHeight();
			//initialize small rectangles
			for (int j=0;j<this.burger[i].length;j++){
				this.burger[i][j]=new Rectangle2D.Double(x+width*j,y,width,height);
				this.burgerStatus[i][j]=0;
			}
		}
	}
	/* (non-Javadoc)
	 * @see burgettime.Temporal#timePassed()
	 */
	@Override
	public void timePassed() {
		// TODO Auto-generated method stub
		
	}

	/* (non-Javadoc)
	 * @see burgettime.Temporal#die()
	 */
	@Override
	public void die() {
		// Do nothing, Burger will not die
	}

	/* (non-Javadoc)
	 * @see burgettime.Temporal#setIsPaused(boolean)
	 */
	@Override
	public void setIsPaused(boolean isPaused) {
		// TODO Auto-generated method stub
		this.isPaused=isPaused;
	}

	/* (non-Javadoc)
	 * @see burgettime.Temporal#getIsPaused()
	 */
	@Override
	public boolean getIsPaused() {
		// TODO Auto-generated method stub
		return this.isPaused;
	}

	/**
	 * TODO Put here a description of what this method does.
	 * @param x 
	 * @param y
	 *
	 * @param item
	 */
//	public void depressSection(int x, int y){
//		// TODO Auto-generated method stub
//		for (int i=0;i<this.burger.length;i++){
//			for (int j=0;j<this.burger[0].length;j++){
//				if (x>=this.burger[i][j].getX() && x<=this.burger[i][j].getX()+this.burger[i][j].getWidth()
//					&& y>=this.burger[i][j].getY() && y<=this.burger[i][j].getY()+this.burger[i][j].getHeight()
//					&& this.burgerStatus[i][j]!=2){
//					this.burger[i][j].setRect(this.burger[i][j].getX(),this.burger[i][j].getY()+(2-this.burgerStatus[i][j])*3,
//							this.burger[i][j].getWidth(),this.burger[i][j].getHeight());
//					this.burgerStatus[i][j]=2;
//					
//					if (j!=0 && this.burgerStatus[i][j]==0){
//						this.burgerStatus[i][j-1]=1;
//						this.burger[i][j-1].setRect(this.burger[i][j-1].getX(),this.burger[i][j-1].getY()+3,
//								this.burger[i][j-1].getWidth(),this.burger[i][j-1].getHeight());
//					}
//					
//					if (j!=this.burger[0].length-1 && this.burgerStatus[i][j]==0){
//						this.burgerStatus[i][j+1]=1;
//						this.burger[i][j+1].setRect(this.burger[i][j-1].getX(),this.burger[i][j+1].getY()+3,
//								this.burger[i][j+1].getWidth(),this.burger[i][j+1].getHeight());
//					}
//				}
//			}
//		}
//		this.paint();
//		for (int i=0;i<this.burger.length;i++){
//			int count=0;
//			for (int j=0;j<this.burger[i].length;j++){
//				if (this.burgerStatus[i][j]==2){
//					count++;
//				}
//			}
//			if (count==5){
//				this.fall(i);
//			}
//		}
//	}
//	
//	/**
//	 * TODO Put here a description of what this method does.
//	 * @param level 
//	 *
//	 */
//	public void fall(int level){
//		// TODO Auto-generated method stub
//		double burger_Ycoordinate=this.burger[level][0].getY();
//		int index = 0;
//		double min=10000;
//		for (int i=0;i<this.bars.size();i++){
//			if (burger_Ycoordinate<this.bars.get(i).getY() && this.bars.get(i).getY()-burger_Ycoordinate<min){
//				index=i;
//				min=burger_Ycoordinate-this.bars.get(i).getY();
//			}
//		}
//		double bars_Ycoordinate=this.bars.get(index).getY();
//		while (burger_Ycoordinate<bars_Ycoordinate){
//			for (int i=0;i<this.burger[0].length;i++){
//				this.burger[level][i].setRect(this.burger[level][i].getX(),burger_Ycoordinate+2,
//						this.burger[level][i].getWidth(),this.burger[level][i].getHeight());
//				this.burgerStatus[level][i]=0;
//			}
//			burger_Ycoordinate+=3;
//			this.paint();
//		}
//		if (index==this.bars.size()-1){
//			this.burgerStatus[level][0]=-1;
//			this.itemsPlated++;
//		}
//		this.position[2*level].setLocation(this.position[2*level].getX(),burger_Ycoordinate);
//		this.position[2*level+1].setLocation(this.position[2*level+1].getX(),burger_Ycoordinate+this.burger[level][0].getHeight());
//		
//	
//	}
	/**
	 * TODO Put here a description of what this method does.
	 *
	 * @return
	 */
	@SuppressWarnings("javadoc")
	public boolean isPlated(){
		if (this.itemsPlated==4){
			return true;
		}
		return false;
	}
	
	
	/**
	 * TODO Put here a description of what this method does.
	 *
	 * @return
	 */
	
	public Color[] getColor() {
		// TODO Auto-generated method stub
		return this.colorList;
	}
	
	/**
	 * TODO Put here a description of what this method does.
	 *
	 * @return
	 */
	public ArrayList<Rectangle2D> getShape() {
		return this.position;
	}
	
	
}
